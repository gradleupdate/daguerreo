/*
 * Copyright 2015 Yusuke Ikeda
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext {
        springBootVersion = '1.3.0.M2'
        jooqVersion = '3.6.2'
        h2Version = '1.4.+'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.jooq:jooq-codegen:${jooqVersion}"
        classpath "com.h2database:h2:${h2Version}"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot' 

ext {
    javaVersion = JavaVersion.VERSION_1_8
    flywayVersion = '3.2.1'
}

jar {
    baseName = 'daguerreo'
    version = '0.0.1-SNAPSHOT'
}

targetCompatibility = sourceCompatibility = javaVersion
tasks.withType(AbstractCompile)*.options*.encoding = 'UTF-8'

sourceSets {
    generated
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-devtools"
    compile "org.springframework.boot:spring-boot-starter-jooq"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.flywaydb:flyway-core:${flywayVersion}"
    runtime "com.h2database:h2"
//    runtime "mysql:mysql-connector-java"
    testCompile "org.springframework.boot:spring-boot-starter-test"
}

idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
        vcs = 'Git'
    }
    module {
        generatedSourceDirs += sourceSets.generated.java.srcDirs
        downloadJavadoc = true
        downloadSources = true
    }
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
        downloadJavadoc = true
        downloadSources = true
    }
}

task jooqGenerate {
    description = 'Using the source code generation function of jOOQ, it will generate dao, entity, and more from the DB schema.'
    doLast {
        def writer = new StringWriter()
        new groovy.xml.MarkupBuilder(writer).configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.6.0.xsd') {
            jdbc() {
                driver 'org.h2.Driver'
                url 'jdbc:h2:file:/tmp/daguerreo'
                user 'sa'
                password ''
            }
            generator() {
                database() {
                    name 'org.jooq.util.h2.H2Database'
                    includes '.*'
                    excludes 'schema_version'
                    inputSchema 'PUBLIC'
                }
                generate() {
                    daos true
                    validationAnnotations true
                }
                target() {
                    packageName 'org.yukung.daguerreo.domain'
                    directory 'src/generated/java'
                }
            }
        }
        org.jooq.util.GenerationTool.generate(
                javax.xml.bind.JAXB.unmarshal(
                        new StringReader(writer.toString()),
                        org.jooq.util.jaxb.Configuration.class
                )
        )
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}
